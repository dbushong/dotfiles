#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use POSIX 'strftime';

$| = 1;

my $prog = basename($0);
my %opt;
getopts('hs:DRt:H1', \%opt);
usage() if $opt{h} || @ARGV != 1;
sub usage {
  die <<EOU;
usage: $prog [-1] [-s secs] [-D] [-R] [-t target-size] [-H] file-or-directory
       -1: just run once; default: continuous updates
       -s: number of seconds to wait for data gathering; default: 2
       -D: for a directory, don't do an initial du before the 2 measurements
       -R: don't repaint the line; just reprint every interval
       -H: use bytes and secs for all output values (default: human readable)
       -t: specify a target size in bytes and report estimated completion time;
           implies -R
EOU
}

$opt{s} ||= 2;
$opt{R} = 1 if $opt{t};

my @units = qw(bytes KiB MiB GiB TiB);
splice(@units, 1) if $opt{H};

my %tunits = (
  1        => 's',
  60       => 'm',
  60*60    => 'h',
  60*60*24 => 'd',
);
%tunits = (1 => 's') if $opt{H};

my $target = $ARGV[0];

my $dir;
if (-d $target) {
  $dir = "du -sb \Q$target";
  `$dir` unless $opt{D};
}
elsif (!-f $target) {
  die "$prog: no such file or directory '$target'\n";
}


my $first = get_size();
my $start = time();

while (1) {
  sleep($opt{s});
  my $cur = get_size();
  my $now = time();

  my $bytes = $cur - $first;
  my $elap  = $now - $start;
  my $speed = $bytes / $elap;

  my $speed_str = size_units($speed, '%.1f %s/s');
  print "          \r" unless $opt{R};
  print "@{[ size_units($bytes) ]} in @{[ time_units($elap) ]}: $speed_str";
  print "\n" if $opt{R};

  if ($opt{t}) {
    if ($cur > $opt{t}) {
      die "$prog: current ($cur) > target ($opt{t}); should be finished\n";
    }
    elsif ($opt{t} == $cur) {
      print "100% complete\n";
      exit;
    }

    my $left = $opt{t} - $cur;
    my $secs = $left / $speed;

    printf("%.1f%% complete; %s remaining; finished in %s at %s\n", 
      $cur / $opt{t} * 100,
      size_units($left, '%.1f %s'), 
      time_units($secs),
      strftime('%Y-%m-%d %H:%M:%S', localtime($now + $secs))
    );
  }

  last if $opt{1};
}

sub size_units {
  my ($num, $fmt) = @_;

  $fmt ||= '%.1f%s';
  for (my $i = $#units; $i >= 0; $i--) {
    my $n = 1024 ** $i;
    return sprintf($fmt, $num / $n, $units[$i]) if $num >= $n;
  }
  sprintf($fmt, 0, $units[0]);
}

sub time_units {
  my ($secs) = @_;

  my $str;
  for my $div (sort { $b <=> $a } keys(%tunits)) {
    if ($secs >= $div) {
      $str .= int($secs/$div) . $tunits{$div};
      $secs %= $div;
    }
  }
  $str = '0s' unless defined $str;
  $str;
}

sub get_size {
  return -s $target unless $dir;
  my $s = `$dir`;
  $s =~ s/\s.*//;
  $s;
}
