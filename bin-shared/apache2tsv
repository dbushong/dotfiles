#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use Time::Local;
use CGI;
use utf8;

my $def_fields = 'ip,ident,user,year,mon,day,hour,min,sec,method,path,query,'
               . 'http,code,bytes,referrer,ua';

my $prog = basename($0);
my %opt;
getopts('hf:qe:', \%opt);
usage() if $opt{h};
sub usage {
  die <<EOU;
usage: $prog [-q] [-e perl-expr] [-f field[,field[,...]]] [file [...]]
       -q: quiet: no warnings about unparseable lines
       -e: eval perl string; fields are available as %F
           true return value => line is printed; false => not
       -f: specify fields (and order) to emit; default is all real fields, or:
           $def_fields
           additionally available are dynamic fields, including:
           ts: unix seconds-since-epoch of timestamp
           query:<field name>: a single field of the query string
           query:*: all query string args as key1\\tval1\\tkey2...
                    note: this can be specified only once, and must be last
EOU
}

my @fields = split(/,/, $opt{f} || $def_fields);
my %fields; $fields{$_}++ for @fields;

# make sure query:* is last, if given
my $query_star;
if ($fields{'query:*'}) {
  usage() if $fields{'query:*'} > 1 || $fields[-1] ne 'query:*';
  pop(@fields); # remove from general population
  $query_star = 1;
  delete $fields{'query:*'};
}

# note which fields we want split from the query
my @split_query;
for (@fields) {
  push(@split_query, $1) if /^query:(.+)/;
}

my $apache_re = qr{^
  (\d+\.\d+\.\d+\.\d+) [ ]  # ip
  (\S+)                [ ]  # ident
  (\S+)                [ ]  # user
  \[
    (\d\d) / ([JFMASOND][aepuco][nbrylgptvc]) / (\d{4}) # day mon year
    : (\d\d) : (\d\d) : (\d\d)                          # hour min sec
    [ ] [+-] \d{4}
  \] [ ]
  " (?:
      ([A-Z]+)                   [ ]  # method
      ([^?"]+) (?: \? ([^"]*) )? [ ]  # path query
      HTTP/([\d.]+)                   # http
    | 
      -
    )
  " [ ]
  (\d+)       [ ] # code
  (\d+ | -)   [ ] # bytes
  " ([^"]*) " [ ] # referrer
  " ([^"]*) "     # ua
}x;

# build Mon -> num mapping
my @mons = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
my %mon; $mon{$mons[$_]} = $_+1 for 0..11;

while (<>) {
  my %F;
  @F{qw(ip ident user day mon year hour min sec method
        path query http code bytes referrer ua)} = /$apache_re/o;

  unless ($F{ip}) {
    warn "bad line: $_" unless $opt{q};
    next;
  }
  
  for (qw(ident user referrer ua bytes)) {
    $F{$_} = '' if $F{$_} eq '-';
  }
  $F{$_}  = $F{$_}+0 for qw(day hour min sec);
  $F{mon} = $mon{$F{mon}};
  $F{ts}  = timelocal($F{sec}, $F{min}, $F{hour}, $F{day}, $F{mon}-1, 
                      $F{year}-1900) if $fields{ts};

  # copy for additions from query:*
  my @row_fields = @fields;

  # split out query args if requested
  if ((@split_query || $query_star) && $F{query}) {
    my $q = CGI->new($F{query});
    my @row_split_query = @split_query;
    if ($query_star) {
      for (sort($q->param)) {
        push(@row_fields, "query-name:$_", "query:$_");
        $F{"query-name:$_"} = $_;
        push(@row_split_query, $_);
      }
    }
    $F{"query:$_"} = $q->param($_) for @row_split_query;
  }

  my $ok = !$opt{e} || eval($opt{e});
  warn $@ if !$ok && $@;
  next unless $ok;

  my @values = map { defined() ? $_ : '' } @F{@row_fields};
  warn 'removing \t from output' if map { s/\t/ /g ? (1) : () } @values;
  print(join("\t", @values), "\n");
}

__END__

1.2.3.4 logname user [30/Aug/2010:00:00:38 -0700] "GET /blah?foo=bar HTTP/1.1" 200 196 "http://referring-site.example.com/" "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8"

195.243.86.188 - - [30/Aug/2010:05:22:39 -0700] "GET /run/mashlogic?guid=90736A04-E438-620E-37E2-78B1907297D9 HTTP/1.1" 200 2423 "http://www.accenture.com/Global/Services/Client_Successes/By_Industry/Communications/Deutsche-Telekom-product-portfo^Clio-optimization.htm" "Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.2) Gecko/20100115 Firefox/3.6 (.NET CLR 3.5.30729)"
