#!/usr/bin/perl

use strict;
use warnings;
use Image::ExifTool 'ImageInfo';
use Time::Local;
use POSIX 'strftime';
use Getopt::Std;
use File::Basename;
use File::Path;
use File::Copy;
use File::Find;

$| = 1;

my $def_fmt = '%Y/%m/%d';
my $now     = time();
my $cur_yr  = (localtime($now))[5] + 1900;

my %opt;
my $prog = basename $0;
getopts('hclnvfk:E', \%opt);
die <<EOF if $opt{h} || @ARGV < 2 || ($opt{l} && $opt{c});
usage: $prog [-E] [-n | -v] [-f] [-l | -c] [-d strftime-fmt] \\
         file [dir2 [...]] dest-dir
       -E: don't use EXIF data even if available
       -n: don't actually move (implies -v)
       -d: specify an explicit format for dir to put things in;
           default: $def_fmt
       -v: verbose
       -f: force move; overwrite without asking; default is to skip and warn
       -l: move, then link
       -c: copy intead of moving
EOF
$opt{v} = 1 if $opt{n};
$opt{d} = $def_fmt unless exists $opt{d};

my $dest = pop(@ARGV);

# 'DateTimeOriginal' => '2008:09:04 12:47:56',
my ($item, $fail);
for (@ARGV) {
  s,/+$,,;
  unless (-e) {
    warn "$prog: $_ does not exist\n";
    next;
  }

  $item = $_;
  if (-d) {
    find({ wanted => \&mv_file, no_chdir => 1 }, $_);
  }
  elsif (-f) {
    mv_file(1);
  }
  else {
    warn "$prog: $item is not file or directory\n";
    next;
  }
}
exit($fail || 0);

sub mv_file {
  my ($single) = @_;

  my $file = $_;

  return if -d $file;

  my $ts;
  if ($opt{E}) {
    $ts = (stat($file))[9];
  }
  else {
    my $info = ImageInfo($file);
    my ($y, $mo, $d, $h, $mi, $s) = split(/[:\s]+/, $info->{DateTimeOriginal}
      || $info->{ModifyDate} || $info->{FileModifyDate});
    if ($y > $cur_yr+1) {
      warn "$prog: year $y > current year+1; assuming current year\n";
      $y = $cur_yr;
    }
    $ts = eval { timelocal($s, $mi, $h, $d, $mo - 1, $y) };
    unless ($ts) {
      warn "$prog: couldn't determine datetime for $file; using current\n";
      $ts = $now;
    }
  }

  my $path = "$dest/" . strftime($opt{d}, localtime($ts));

  my $suff = $file;
  my $idir = dirname($item);
  $suff =~ s#^\Q$idir/##;
  $path .= "/$suff";

  print "$file -> $path\n" if $opt{v};

  if (-e $path && !$opt{f}) {
    $fail = 1;
    print STDERR "$path already exists; skipping move\n";
    return;
  }

  return if $opt{n};

  mkpath(dirname($path));
  if ($opt{c}) {
    copy($file, $path) || warn $!;
  }
  else {
    if (move($file, $path)) {
      symlink($path, $file) if $opt{l};
    }
    else {
      warn $!;
    }
  }
  utime(time(), $ts, $path);

  rmemptytree(dirname($file), $item) unless $single;
}

sub rmemptytree {
  my ($dir, $top) = @_;

  return if $opt{c};

  opendir(my $dh, $dir);
  my @files = readdir($dh);
  closedir($dh);

  return if @files;

  rmdir($dir);
  return if $dir eq $top;

  rmemptytree(dirname($dir));
}
