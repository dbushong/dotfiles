#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Std;
use File::Basename;

my ($key, $file);
my %format = (
  'perl-script' => {
    extension  => 'pl',
    executable => 1,
    template   => <<'EOT'
#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use utf8;

my $prog = basename($0);
my %opt;
getopts('h', \%opt);
usage() if $opt{h};
sub usage {
  die <<EOU;
usage: $prog
EOU
}

EOT
  },
  html => {
    extension    => 'html',
    editor_flags => { qr/vi/ => ['+7'] },
    template     => <<'EOT'
<!DOCTYPE html>
<html>
  <head>
    <title>Title of Page</title>
    <meta charset="utf-8">
  </head>
  <body>

  </body>
</html>
EOT
  },
  'xhtml' => {
    extension    => 'xhtml',
    editor_flags => { qr/vi/ => ['+8'] },
    template => <<'EOT'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>Title of Page</title>
  </head>
  <body>

  </body>
</html>
EOT
  },
  'php' => {
    extension    => 'php',
    editor_flags => { qr/vi/ => ['+2'] },
    template     => "<?\n\n?>\n",
  },
  'manifest.json' => {
    editor_flags => { qr/vi/ => ['+3'] },
    template     => <<'EOT'
{
  // Required
  "name":    "My Extension",
  "version": "versionString",

  // Recommended
  "description": "A plain text description",
  "icons": {
    "16":  "icon16.png",
    "32":  "icon32.png",
    "48":  "icon48.png",
    "128": "icon128.png"
  },

  // Pick one (or none)
  "brower_action": {...},
  "page_action": {...},
  "theme": {...},

  // Add any of these that you need
  "background_page": "aFile.html",
  "chrome_url_overrides": {...},
  "content_scripts": [...],
  "options_page": "aFile.html",
  "permissions": [...],
  "plugins": [...],
  "update_url": "http://path/to/updateInfo.xml"
}
EOT
  },
  recipe => {
    template => sub {
      my $name = $file;
      $name =~ s/\.txt$//;
      $name =~ s/-(.)/ \u$1/g;
      $name = ucfirst($name);
      my $line = $name;
      $line =~ s/./~/g;
      return <<EOT;
$name
$line


EOT
    }
  },
  ruby => {
    extension  => 'rb',
    executable => 1,
    template   => <<'EOT'
#!/usr/bin/ruby

require 'optparse'

prog = File.basename($0)
opts = OptionParser.new
opts.banner = "usage: #{prog} [options]"
opts.on_tail('-h', '--help', 'Show this message') { puts opts ; exit 1 }
begin
  opts.parse!(ARGV)
rescue OptionParser::ParseError => e
  $stderr.puts "#{prog}: #{e}\n#{opts}"
  exit 1
end

EOT
  },
  sh => {
    extension  => 'sh',
    executable => 1,
    template   => <<'EOT'
#!/bin/bash -e

PROG="${0##*/}"

usage () {
  cat <<EOF >&2
usage: $PROG [options]
EOF
  exit 1
}

while getopts "h" opt; do
  case "$opt" in
    h) usage ;;
#   f) FOO="$OPTARG" ;;
    *) echo 'internal error' >&2 ; exit 1 ;;
  esac
done
shift $((OPTIND-1))

EOT
  },
  'coffee-script' => {
    extension => 'coffee',
    executable => 1,
    template   => <<'EOT'
#!/usr/bin/env coffee

prog = require 'commander'
prog.option('-s, --sample-option <s>', 'Some sample option', Number)
    .parse(process.argv)

# remaining args are prog.args

EOT
  },
  'Makefile' => {
    template => <<'EOT'
# turn off all the builtin C-specific crap
.SUFFIXES:
MAKEFLAGS += --no-builtin-rules

.PHONY: default
default:
	@echo done
EOT
  },
  'python-script' => {
    extension => 'py',
    executable => 1,
    template => <<'EOT'
#!/usr/bin/env python

import argparse

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", "-v", help="be verbose")
    parser.add_argument("foo", help="a required positional arg")
    parser.add_argument("bar", help="an optional positional arg", nargs="?")

    args = parser.parse_args()

    # do stuff here with args.verbose, args.foo, args.bar

if __name__ == "__main__":
    main()

EOT
  }
);

my $prog = basename($0);
my %opt;
getopts('hEf', \%opt);
usage() if $opt{h} || @ARGV > 2;
sub usage {
  die <<EOU;
usage: $prog [-E] [-f] [@{[ join(' | ', sort keys %format) ]}] filename|-
       -f: force (file file already exists)
       -E: don't start editor on resulting file
EOU
}

if (@ARGV == 1) {
  $key = basename($file = $ARGV[0]);
  unless ($format{$key}) {
    die "$prog: file must have an extension to autodetect format\n"
      unless $file =~ /\.([^.]+)$/;
    my $ext = lc($1);
    ($key) = grep { lc($format{$_}{extension} || '') eq $ext } keys %format;
    die "$prog: no match for format with given extension; specify explicitly\n"
      unless $key;
  }
}
else {
  ($key, $file) = @ARGV;
}

unless ($format{$key}) {
  my @m = grep(/$key/i, sort { length($a) <=> length($b) } keys %format);
  die("$prog: choose one of: " . join(', ', @m) . "\n") if @m > 1;
  die "$prog: no match for format $key\n" unless @m;
  $key = $m[0];
}

my $fmt = $format{$key};

if ($file eq '-') {
  print $fmt->{template};
  exit;
}

die "$prog: $file already exists; -f to force\n" if -f $file && !$opt{f};

open(my $fh, '>', $file) || die "$prog: couldn't open $file: $!\n";
print $fh $fmt->{template};
close($fh);

chmod(0775, $file) if $fmt->{executable};

if ($opt{E}) {
  print "created $file\n";
  exit;
}

my $editor = $ENV{VISUAL} || $ENV{EDITOR} || 'editor';
my @flags;
$fmt->{editor_flags} ||= { qr/vi/ => ['+'] };
while (my ($re, $flags) = each(%{$fmt->{editor_flags}})) {
  if ($editor =~ $re) {
    @flags = @$flags;
    last;
  }
}
exec($editor, @flags, $file);
