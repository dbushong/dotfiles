#!/usr/bin/env python

from functools import partial
import json
from os import environ
from netrc import netrc
import re
from subprocess import run
import sys


def check_configs():
    try:
        host = environ.get("JIRA_HOST", "<missing>")
        netrc().hosts[host]
        return f"https://{host}/rest/api/3"
    except Exception:
        sys.stderr.write(
            """\
    For `git branch-list-jira` work properly you need to:

    1. Set your JIRA_HOST environment variable to the hostname you use for JIRA,
    e.g. mycompanyname.atlassian.net
    2. Ensure that you have a section in your ~/.netrc file that looks like:

    machine mycompanyname.atlassian.net
    login myusername@mycompany.com
    password your-jira-api-token

    You can create an API token here:
    https://id.atlassian.com/manage-profile/security/api-tokens

    Make sure your ~/.netrc is mode 0600
    """
        )
        sys.exit(1)


def run_git_branch():
    return run(
        ["git", "-c", "color.ui=always", "branch"], capture_output=True, text=True
    ).stdout


def add_descr(url_base: str, m: "re.Match[str]") -> str:
    res = json.loads(
        run(
            ["curl", "--netrc", f'{url_base}/issue/{m.group("issue")}'],
            capture_output=True,
        ).stdout
    )
    return f"{m.group('prefix')}{m.group('issue')}{m.group('suffix')}  \x1b[2m{res['fields']['summary']}\x1b[m"


if __name__ == "__main__":
    git_branch = run_git_branch()

    try:
        url_base = check_configs()
        git_branch = re.sub(
            r"^(?P<prefix>\*?\s+(?:\x1b\[\d*m)?)(?P<issue>[A-Z]+-\d+)(?P<suffix>\S+(?:\x1b\[m)?\s*)$",
            partial(add_descr, url_base),
            git_branch,
            flags=re.MULTILINE,
        )
    except Exception as e:
        sys.stderr.write(repr(e) + "\n")

    sys.stdout.write(git_branch)
