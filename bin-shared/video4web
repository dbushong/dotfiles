#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use Cwd;
use File::Temp 'mktemp';

my $prog = basename($0);
my %opt;
getopts('hfr:vne:', \%opt);
usage() if $opt{h} || !@ARGV || ($opt{r} && $opt{r} !~ /^(90|180|270)$/);
sub usage {
  die <<EOU;
usage: $prog [options] input.(dv|mov|avi) output.(mp4|flv)
       $prog [options] [-f] in1.(dv|mov|avi) [in2.(dv|mov|avi) [...]]
       options are:
       -e: give an extension to pretend the input file is for purposes of
           settings
       -v: verbose mode: show commands run and their output
       -n: don't do anything; just print commands (-v style)
       -r: rotate output movie by degrees clockwise (90, 180, or 270)
       -f: output flv instead of mp4
EOU
}

$opt{v} = 1 if $opt{n};

my $rot_filter = '';
$rot_filter = {
  90  => ',rotate=1',
  180 => ',mirror,flip',
  270 => ',rotate=2',
}->{$opt{r}} if $opt{r};

my $passlog = mktemp("/tmp/$prog.log.XXXX");

run('renice', '+20', $$);

if (@ARGV == 2 && $ARGV[1] =~ /\.(flv|mp4)$/i) {
  my $ext = $1;
  die "$prog: can't specify -f and an mp4 output file\n"
    if $opt{f} && lc($1) eq 'mp4';
  convert(@ARGV);
}
else {
  for (@ARGV) {
    my $to  = $_;
    my $ext = $opt{f} ? 'flv' : 'mp4';
    $to =~ s/\.[^.]+$/.$ext/;
    convert($_, $to);
  }
}

sub convert {
  my ($in, $out) = @_;

  my $fmt;
  if ($opt{e}) {
    $fmt = $opt{e};
  }
  else {
    $in =~ /\.([^.]+)$/;
    $fmt = $1;
  }
  $fmt = lc($fmt);

  my $dsize = '';
  my ($width, $height);
  if ($fmt eq 'mov') {
    # all .movs are widescreen from dave's camera (for now)
    ($width, $height) = (512, 288);
  }
  elsif ($fmt =~ /^(avi|dv)$/) {
    $dsize = ',dsize=4/3';
    ($width, $height) = (320, 240);
  }
  else {
    warn "$prog: unknown extension on input file $in; must be dv, avi, or mov; skipping\n";
    return;
  }

  my $info = `ffmpeg -i \Q$in\E 2>&1`;

  my $fps = ($info =~ /([\d.]+)\s+(?:fps|tb)/) && $1;
  my @fps;
  if ($fps) {
    @fps = ('-fps', $fps);
  }
  else {
    warn "$prog: couldn't determine fps of $in\n";
  }

  my $audio = $info =~ /Stream #0\.1/;

  my $shared_opts = qq{-passlogfile $passlog -vf softskip,scale=$width:$height:0:0$rot_filter$dsize,harddup -sws 10 -af resample=22050:0:2 -srate 22050 -channels 2 };
  
  my ($pass1_opts, $pass2_opts, $ext);
  if ($out =~ /\.flv$/i) {
    $shared_opts .= q{-of lavf -lavfopts format=flv -oac lavc -ovc lavc -lavcopts acodec=libmp3lame:abitrate=128:vcodec=flv:vbitrate=1000:mbd=2:mv0:trell:v4mv:cbp:last_pred=3};
    $pass1_opts = 'vpass=1:turbo';
    $pass2_opts = 'vpass=2';
    $ext        = '';
  }
  else {
    $shared_opts .= q{-oac faac -faacopts mpeg=4:br=128:object=2 -ovc x264 -x264encopts bitrate=1000:me=umh:me_range=24:nodct_decimate:nointerlaced:8x8dct:nofast_pskip:trellis=1:partitions=p8x8,b8x8,i8x8,i4x4:mixed_refs:keyint=300:keyint_min=30:frameref=3:bframes=6:b_adapt:b_pyramid:weight_b:direct_pred=auto:subq=7:chroma_me:cabac:deblock:nossim:nopsnr:level_idc=41:threads=auto};
    $pass1_opts = 'pass=1:turbo=2';
    $pass2_opts = 'pass=2';
    $ext        = '.avi';
  }

  run("mencoder \Q$in\E -o /dev/null $shared_opts:$pass1_opts");
  run("mencoder \Q$in\E -o \Q$out\E$ext $shared_opts:$pass2_opts");

  unlink($passlog) unless $opt{n};

  return if $out =~ /\.flv$/i;

  my $old_dir = getcwd();
  chdir(dirname($out));
  $out = basename($out);

  run('MP4Box', '-aviraw', 'video', "$out.avi", '-out', "$out.h264");
  if ($audio) {
    run('MP4Box', '-aviraw', 'audio', "$out.avi", '-out', "$out.aac");
    rename("${out}_audio.raw", "${out}_audio.aac") unless $opt{n};
    run('MP4Box', @fps, '-add', "${out}_video.h264", 
                         '-add', "${out}_audio.aac", $out);
  }
  else {
    run('MP4Box', @fps, '-add', "${out}_video.h264", $out);
  }
  unlink("${out}_video.h264", "${out}_audio.aac", "$out.avi") unless $opt{n};

  chdir($old_dir);
}

sub run {
  my (@cmd) = @_;
  my $cmd = (@cmd > 1) ? join(' ', map { quotemeta } @cmd) : $cmd[0];
  if ($opt{v}) {
    print "$cmd\n";
    system(@cmd) unless $opt{n};
  }
  else {
    $cmd .= ' >/dev/null 2>&1';
    system($cmd) unless $opt{n};
  }
}
