#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Std;
use File::Basename;

my $prog = basename($0);
my %opt;
getopts('hrupB', \%opt);
usage() if $opt{h} 
        || ($opt{u} && (exists $opt{n} || $opt{p} || $opt{B}));
sub usage {
  die <<EOU;
usage: $prog [-r] [-p] [-B] [file [...]]
       $prog [-r] -u
       -r: output rendering engines rather than browsers
       -p: percentages instead of counts
       -u: only output unmatched (for debugging/improvement)
       -B: hide bots
EOU
}

my $def_ver_ua = 2;
my %ver_ua = ();

my $def_ver_rend = 1;
my %ver_rend = (
  Gecko => 2,
);

my %counts;

while (<>) {
  chomp;
  s/^(?:\S+\s+){11}"([^"]{2,})"$/$1/ || next;
  next if $_ eq '-';

  my $line = $_;

  # Bots
  if ($line =~ /(feedfetcher|spider|bots?|pubsub|bloglines|crawl(er)?|test|teoma|charlotte|java|lwp::simple|google desktop|agent|scoutjet|slurp|python-urllib|scooter|rambler|validator|winhttp|sleuth|seeker|nutch|nagios|libwww-perl|webcollage|screensaver|curl|wget)\b/i || $line =~ m{^Mozilla/5\.0 \([^)]+\)$}) {
    output('BOT') unless $opt{B};
    next;
  }

  my $unk = 0;
  if ($opt{r}) {
    if ($line =~ m{\bAppleWebKit/([\d.rcbape]+)}) {
      output('AppleWebKit', $1);
    }
    elsif ($line =~ /\bGecko\b/ && $line =~ /rv:([\d.rcbape]+)/) {
      output('Gecko', $1);
    }
    elsif ($line =~ m{\bOpera/(\d+)}) {
      output('Opera', $1);
    }
    elsif ($line =~ /\bMSIE ([\d.rcbape]+)/) {
      output('MSIE', $1);
    }
    else {
      $unk = 1;
    }
  }
  else {
    # Blah 1.2.3 or Blah/1.2.3
    if ($line =~ m{\b(MSIE|Danger hiptop|Android|PLAYSTATION) ([\d.rcbape]+)} || $line =~ m{\b(Chrome|Firefox|Flock|Opera|BlackBerry\d+|Camino|Netscape\d*|Pandora|Shiretoko|Iceweasel|Minefield|Palemoon|Epiphany|Konqueror|Nokia[^/]*|Trident)/([\d.rcbape]+)}) {
      output($1, $2);
    }
    # Version/1.2.3 Blah/348
    elsif ($line =~ m{ Version/(\S+).*\b(Safari)/\S+}) {
      output($2, $1);
    }
    # no Version + Safari/234 == Safari 2.x
    elsif ($line =~ m{\bSafari/\d}) {
      output('Safari', 2);
    }
    elsif ($line =~ /\b(NET_mmhpset)\b/) {
      output($1);
    }
    else {
      $unk = 1;
    }
  }

  output($line, undef, 1) if $unk;
}

my $total = 0;
if ($opt{p}) {
  $total += $_ for values %counts;
}

for (sort { $counts{$b} <=> $counts{$a} } keys %counts) {
  my ($sp, $num);
  if ($opt{p}) {
    $num = int($counts{$_} / $total * 100 + 0.5) . '%';
    $sp  = 4;
  }
  else {
    $num = $counts{$_};
    $sp  = 9;
  }
  printf("%${sp}s %s\n", $num, $_);
}

sub output {
  my ($name, $ver, $unk) = @_;

  if ($unk) {
    $name = 'UNKNOWN' unless $opt{u};
    $counts{$name}++;
  }
  elsif (!$opt{u}) {
    if ($ver) {
      my $n = $opt{r} 
            ? ($ver_rend{$name} || $def_ver_rend)
            : ($ver_ua{$name}   || $def_ver_ua);
      $ver =~ s/^((?:\d+\D+){$n}).*/$1/;
      $ver =~ s/\D+$//;
      $counts{"$name $ver"}++;
    }
    else {
      $counts{$name}++;
    }
  }
}

sub group {
  my ($v) = @_;
}
