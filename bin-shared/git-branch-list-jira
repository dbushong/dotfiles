#!/usr/bin/env python

from functools import partial
import json
from os import environ
from netrc import netrc
import re
from subprocess import run
import sys
import typing as t


def check_configs():
    try:
        host = environ.get("JIRA_HOST", "<missing>")
        netrc().hosts[host]
        return f"https://{host}/rest/api/3"
    except Exception:
        sys.stderr.write(
            """\
    For `git branch-list-jira` work properly you need to:

    1. Set your JIRA_HOST environment variable to the hostname you use for JIRA,
    e.g. mycompanyname.atlassian.net
    2. Ensure that you have a section in your ~/.netrc file that looks like:

    machine mycompanyname.atlassian.net
    login myusername@mycompany.com
    password your-jira-api-token

    You can create an API token here:
    https://id.atlassian.com/manage-profile/security/api-tokens

    Make sure your ~/.netrc is mode 0600
    """
        )
        sys.exit(1)


def run_git_branch():
    return run(
        ["git", "-c", "color.ui=always", "branch"], capture_output=True, text=True
    ).stdout


def add_descr(issues: t.Dict[str, str], m: "re.Match[str]") -> str:
    return f"{m.group('prefix')}{m.group('issue')}{m.group('suffix')}  \x1b[2m{issues[m.group('issue')]}\x1b[m"


def fetch_issue_descrs(
    url_base: str,
    branch_matches: 't.Iterable[re.Match[str]]',
) -> t.Dict[str, str]:
    issues: t.Dict[str, str] = {}
    # would like to fetch these with curl --parallel, but it seems to
    # occasionally mix the results together on stdout...?
    for m in branch_matches:
        # use git branch description for caching
        issue = m.group('issue')
        config_key = f'branch.{m.group("branch")}.description'

        descr = run(
            ['git', 'config', config_key],
            capture_output=True,
            text=True,
        ).stdout.strip()

        if not descr:
            res = json.loads(
                run(
                    ["curl", "--netrc", f"{url_base}/issue/{issue}"],
                    capture_output=True,
                ).stdout
            )
            descr = res["fields"]["summary"]
            run(['git', 'config', config_key, descr])

        issues[issue] = descr

    return issues


branch_list_line_re = re.compile(
    r"^(?P<prefix>\*?\s+(?:\x1b\[\d*m)?)(?P<branch>(?P<issue>[A-Z]+-\d+)\S*)(?P<suffix>(?:\x1b\[m)?\s*)$",
    flags=re.MULTILINE,
)

if __name__ == "__main__":
    git_branch = run_git_branch()

    try:
        url_base = check_configs()
        issues = fetch_issue_descrs(
            url_base, re.finditer(branch_list_line_re, git_branch)
        )
        if issues:
            git_branch = re.sub(
                branch_list_line_re,
                partial(add_descr, issues),
                git_branch,
            )
    finally:
        sys.stdout.write(git_branch)

