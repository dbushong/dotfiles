" set up some var defaults
let g:loaded_matchparen=1      " don't do matchparen nastiness
" let g:xml_use_xhtml=1          " put /> on singleton tags in HTML
let g:sql_type_default='mysql' " default to MySQL style SQL syntax
" let g:php_sql_query=1          " assume strings in PHP are SQL
" fix for CtrlP + ^H-as-backspace
let g:ctrlp_prompt_mappings = {
  \ 'PrtBS()':      ['<bs>', '<c-]>', '<c-h>'],
  \ 'PrtCurLeft()': ['<left>', '<c-^>'],
  \ }


" extra libraries
try
  runtime ftplugin/man.vim
catch /E484:/
endtry

" syntax related settings
syntax on
syntax sync minlines=200
set background=dark
highlight clear NonText
highlight clear Underlined
highlight link  Underlined CursorLine

" filetype-based settings
filetype plugin indent on

" compiler setup
autocmd BufNewFile,BufRead * if &ft == 'perl'  | compiler perl  | endif
autocmd BufNewFile,BufRead * if &ft == 'mason' | compiler mason | endif
autocmd BufNewFile,BufRead * if &ft == 'ruby'  | compiler ruby  | endif
autocmd BufNewFile,BufRead * if &ft == 'php'   | compiler php   | endif
autocmd BufNewFile,BufRead * if &ft == 'javascript' | compiler javascript | endif

" general settings
set modeline
set noshowmode
set noruler
set nohlsearch
set backspace=indent,eol
set ignorecase
set smartcase
set incsearch
set wildmode=list:longest,full
set shiftround
set shiftwidth=2
set tabstop=8
set softtabstop=2
set expandtab
set splitbelow
set autoindent
set writebackup
set nobackup
set wrapscan
set tildeop
set showmatch
set exrc
set tags=tags;/
set notitle

" pesky laptop F1
map <F1> <Esc>
map! <F1> <Esc>

" new normal-mode mappings
nmap Y y$
nmap S
\ :if exists("syntax_on") <Bar>
\   syntax off <Bar>
\ else <Bar>
\   syntax enable <Bar>
\ endif <CR>
nmap <Bslash> :set invpaste<CR>:set paste?<CR>
nmap <Bslash>{ $? if rWi($C) {kddp>>A;}
nmap <Bslash>} kddpk<<$xJf(x$F)C;jddk
nmap Q :CoffeeCompile<CR>
nnoremap <C-w>j <C-w>w
nnoremap <C-w>k <C-w>W
nnoremap <C-]> g<C-]>
nnoremap <C-w><C-]> <C-w>g<C-]>

" new commands and command aliases
command -nargs=? -complete=file E split <args>

" zuul smart quotes
" imap “ "
" imap ” "
" imap ’ '

function! SearchWithSkip(pattern, flags, stopline, timeout, skip)
  "
  " Returns true if a match is found for {pattern}, but ignores matches
  " where {skip} evaluates to false. This allows you to do nifty things
  " like, say, only matching outside comments, only on odd-numbered lines,
  " or whatever else you like.
  "
  " Mimics the built-in search() function, but adds a {skip} expression
  " like that available in searchpair() and searchpairpos().
  " (See the Vim help on search() for details of the other parameters.)
  "
  " Note the current position, so that if there are no unskipped
  " matches, the cursor can be restored to this location.
  "
  let l:matchpos = getpos('.')

  " Loop as long as {pattern} continues to be found.
  "
  while search(a:pattern, a:flags, a:stopline, a:timeout) > 0

    " If {skip} is true, ignore this match and continue searching.
    "
    if eval(a:skip)
      continue
    endif

    " If we get here, {pattern} was found and {skip} is false,
    " so this is a match we don't want to ignore. Update the
    " match position and stop searching.
    "
    let l:matchpos = getpos('.')
    break

  endwhile

  " Jump to the position of the unskipped match, or to the original
  " position if there wasn't one.
  "
  call setpos('.', l:matchpos)
endfunction

function! SearchOutside(synName, pattern)
  "
  " Searches for the specified pattern, but skips matches that
  " exist within the specified syntax region.
  "
  call SearchWithSkip(a:pattern, '', '', '',
        \ 'synIDattr(synID(line("."), col("."), 0), "name") =~? "' . a:synName . '"' )
endfunction


function! SearchInside(synName, pattern)
  "
  " Searches for the specified pattern, but skips matches that don't
  " exist within the specified syntax region.
  "
  call SearchWithSkip(a:pattern, '', '', '',
        \ 'synIDattr(synID(line("."), col("."), 0), "name") !~? "' . a:synName . '"' )
endfunction

command! -nargs=+ -complete=command SearchOutside call SearchOutside(<f-args>)
command! -nargs=+ -complete=command SearchInside  call SearchInside(<f-args>)
