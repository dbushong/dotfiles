# Zsh Variables
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
PROMPT='%B%m%b %~ %B[%T]%b '
WATCH=all
WATCHFMT='%n %B%a%b %l from %M at %t.'

fpath=(~/.dotfiles/completions $fpath)
typeset -U fpath

# Zsh Options
setopt append_history beep extended_glob no_match notify auto_pushd \
       auto_remove_slash bg_nice equals extended_glob magic_equal_subst \
       hist_ignore_dups pushd_ignore_dups pushd_silent pushd_to_home \
       no_auto_cd pushd_minus no_always_last_prompt rm_star_silent

# Commands
bindkey -e
stty erase "^H"
bindkey '\e[A' history-beginning-search-backward
bindkey '\C-P' up-line-or-history

# Aliases
alias more=less
alias mroe=less
alias pt=perltidy
alias vi=vim
alias ls='ls -Fh'
a() { awk "{ print \$$1 }" }
alias d='dirs -v | head'
alias sz='source ~/.zshenv;source ~/.zshrc'
fgl() { fgrep --color=always "$@" | less }
egl() { egrep --color=always "$@" | less }
alias last-paste='cat ~/.paste/*(On[1])'
alias serve='python -m http.server'
alias grep='grep --color=auto'
alias ac-covid-copy='ac-covid | head -1 | awk '\''{print $1}'\''; ac-covid| awk '\''{print $2}'\'' | pbcopy'
ql() { qlmanage -p "$1" 2>&1 >/dev/null }

# hub stuff
#alias git=hub
#if type compdef >/dev/null; then
#  compdef hub=git
#fi

# precmd func: git prompt stuffs
function set_git_prompt() {
  local br _left _branch _right

  _left='%B%m%b '
  _right='%~ %B[%T]%b '
  
  br=$(git symbolic-ref HEAD 2>&1)

  if [ "$br" = 'fatal: ref HEAD is not a symbolic ref' ]; then
    _branch="%UNOBRANCH%u "
  else
    br=${br#refs/heads/}
    br=${br:#fatal*}
    [ -n "$br" -a "$br" != master ] && _branch="%U$br%u "
  fi

  export PROMPT="$_left$_branch$_right"
}

source ~/.git-prompt.sh
function set_git_prompt2() {
  GIT_PS1_SHOWCOLORHINTS=true
  __git_ps1 "%B%m%b" " %~ %B[%T]%b " " %s"
}

# precmd cmd: source ssh env inside screen
function source_screen_env {
  [ "$TERM" = screen -a -e ~/.ssh/screen-env ] && source ~/.ssh/screen-env
}

# precmd array
precmd_functions=(set_git_prompt2 source_screen_env)

# Completion
autoload -U compinit
compinit
